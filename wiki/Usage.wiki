#summary Using basic profiling capabilities
#labels Featured

= Introduction =

The application does require source code changes.
However an interceptor style system is presently in the works.


= Usage Steps =
Making your application, HAPTIC enabled requires a few basic steps

== Enable Profiling to Command Queue  ==

{{{
//This is the regular OpenCL call, which in most applications should be similar
cmdQueue = clCreateCommandQueue(context, devices[0], CL_QUEUE_PROFILING_ENABLE, &status);

}}}

== Declare Profiling Object ==

{{{
//Declare the object that maintains profiler state
EventList * profiler = new EventList(context, cmdQueue, devices[0]);
}}}

== Add Generated Events to Profiler ==

{{{

   //Record the state with any specific "name" you want, or you can leave it blank
   profiler->add(event1,"map");
   profiler->add(event2,"reduce");

}}}

== Write out Trace ==

{{{
  //Write out data to the event_traces directory
  profiler->dumpEvents("event_traces");
}}}

== Visualization ==

You can use some of the provided Python utilities for visualization purposes. Please see the file PlotEvents.py for visualization steps