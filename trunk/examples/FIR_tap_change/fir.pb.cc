// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fir.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fir {

namespace {

const ::google::protobuf::Descriptor* stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* pipeline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pipeline_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fir_2eproto() {
  protobuf_AddDesc_fir_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fir.proto");
  GOOGLE_CHECK(file != NULL);
  stage_descriptor_ = file->message_type(0);
  static const int stage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage, id_),
  };
  stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stage_descriptor_,
      stage::default_instance_,
      stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stage));
  pipeline_descriptor_ = file->message_type(1);
  static const int pipeline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pipeline, fir_stg_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pipeline, fir_stg_2_),
  };
  pipeline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pipeline_descriptor_,
      pipeline::default_instance_,
      pipeline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pipeline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pipeline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pipeline));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fir_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stage_descriptor_, &stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pipeline_descriptor_, &pipeline::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fir_2eproto() {
  delete stage::default_instance_;
  delete stage_reflection_;
  delete pipeline::default_instance_;
  delete pipeline_reflection_;
}

void protobuf_AddDesc_fir_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tfir.proto\022\003fir\"!\n\005stage\022\014\n\004name\030\001 \002(\t\022"
    "\n\n\002id\030\002 \002(\005\"H\n\010pipeline\022\035\n\tfir_stg_1\030\001 \001"
    "(\0132\n.fir.stage\022\035\n\tfir_stg_2\030\002 \001(\0132\n.fir."
    "stage", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fir.proto", &protobuf_RegisterTypes);
  stage::default_instance_ = new stage();
  pipeline::default_instance_ = new pipeline();
  stage::default_instance_->InitAsDefaultInstance();
  pipeline::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fir_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fir_2eproto {
  StaticDescriptorInitializer_fir_2eproto() {
    protobuf_AddDesc_fir_2eproto();
  }
} static_descriptor_initializer_fir_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int stage::kNameFieldNumber;
const int stage::kIdFieldNumber;
#endif  // !_MSC_VER

stage::stage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stage::InitAsDefaultInstance() {
}

stage::stage(const stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stage::~stage() {
  SharedDtor();
}

void stage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stage_descriptor_;
}

const stage& stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fir_2eproto();  return *default_instance_;
}

stage* stage::default_instance_ = NULL;

stage* stage::New() const {
  return new stage;
}

void stage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stage::MergeFrom(const stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stage::CopyFrom(const stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void stage::Swap(stage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stage_descriptor_;
  metadata.reflection = stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pipeline::kFirStg1FieldNumber;
const int pipeline::kFirStg2FieldNumber;
#endif  // !_MSC_VER

pipeline::pipeline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pipeline::InitAsDefaultInstance() {
  fir_stg_1_ = const_cast< ::fir::stage*>(&::fir::stage::default_instance());
  fir_stg_2_ = const_cast< ::fir::stage*>(&::fir::stage::default_instance());
}

pipeline::pipeline(const pipeline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pipeline::SharedCtor() {
  _cached_size_ = 0;
  fir_stg_1_ = NULL;
  fir_stg_2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pipeline::~pipeline() {
  SharedDtor();
}

void pipeline::SharedDtor() {
  if (this != default_instance_) {
    delete fir_stg_1_;
    delete fir_stg_2_;
  }
}

void pipeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pipeline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pipeline_descriptor_;
}

const pipeline& pipeline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fir_2eproto();  return *default_instance_;
}

pipeline* pipeline::default_instance_ = NULL;

pipeline* pipeline::New() const {
  return new pipeline;
}

void pipeline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fir_stg_1()) {
      if (fir_stg_1_ != NULL) fir_stg_1_->::fir::stage::Clear();
    }
    if (has_fir_stg_2()) {
      if (fir_stg_2_ != NULL) fir_stg_2_->::fir::stage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pipeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fir.stage fir_stg_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fir_stg_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fir_stg_2;
        break;
      }
      
      // optional .fir.stage fir_stg_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fir_stg_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fir_stg_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pipeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fir.stage fir_stg_1 = 1;
  if (has_fir_stg_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fir_stg_1(), output);
  }
  
  // optional .fir.stage fir_stg_2 = 2;
  if (has_fir_stg_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fir_stg_2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pipeline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fir.stage fir_stg_1 = 1;
  if (has_fir_stg_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fir_stg_1(), target);
  }
  
  // optional .fir.stage fir_stg_2 = 2;
  if (has_fir_stg_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fir_stg_2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pipeline::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fir.stage fir_stg_1 = 1;
    if (has_fir_stg_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fir_stg_1());
    }
    
    // optional .fir.stage fir_stg_2 = 2;
    if (has_fir_stg_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fir_stg_2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pipeline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pipeline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pipeline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pipeline::MergeFrom(const pipeline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fir_stg_1()) {
      mutable_fir_stg_1()->::fir::stage::MergeFrom(from.fir_stg_1());
    }
    if (from.has_fir_stg_2()) {
      mutable_fir_stg_2()->::fir::stage::MergeFrom(from.fir_stg_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pipeline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pipeline::CopyFrom(const pipeline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pipeline::IsInitialized() const {
  
  if (has_fir_stg_1()) {
    if (!this->fir_stg_1().IsInitialized()) return false;
  }
  if (has_fir_stg_2()) {
    if (!this->fir_stg_2().IsInitialized()) return false;
  }
  return true;
}

void pipeline::Swap(pipeline* other) {
  if (other != this) {
    std::swap(fir_stg_1_, other->fir_stg_1_);
    std::swap(fir_stg_2_, other->fir_stg_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pipeline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pipeline_descriptor_;
  metadata.reflection = pipeline_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fir

// @@protoc_insertion_point(global_scope)
